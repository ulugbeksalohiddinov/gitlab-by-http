stages:
  - build
  - deploy

before_script:
  - docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD

variables:
  DEV_APP_PATH: "/home/user/.kube"
  USER: "root"
  HOST: "192.168.182.14"
  MANIFEST_YAML: "manifest-file.yaml"
  DEPLOYMENT_NAME: "deploy-flask" 

build_image:
  stage: build
  image: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/docker:dind
  script:
    - docker build -t ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:latest .
    - docker push ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:latest
  only:
    - main

deploy_image:
  stage: deploy
  image: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/docker:dind
  before_script:
    - eval $(ssh-agent -s)
    - echo "$GITLAB_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  
  script:
    - ssh -p 22 -o StrictHostKeyChecking=no $USER@$HOST "git clone $CI_REPOSITORY_URL $DEV_APP_PATH || true"
   # - ssh -p 22 -o StrictHostKeyChecking=no $USER@$HOST "cd $DEV_APP_PATH && kubectl apply -f $MANIFEST_YAML" # 1- martta deploy qilish uchun
    - ssh -p 22 -o StrictHostKeyChecking=no $USER@$HOST "kubectl rollout restart deployment $DEPLOYMENT_NAME"
    - ssh -p 22 -o StrictHostKeyChecking=no $USER@$HOST "rm -r $DEV_APP_PATH || true"
  only:
    - main
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


--- Add secret for private registry gitlab ---

kubectl create secret docker-registry registry-secret --docker-server=git-lab.test.uz:5050 --docker-username=test-user --docker-password=token --docker-email=user@test.uz 

--- Manifest ---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: deploy-flask
  name: deploy-flask
spec:
  replicas: 3
  selector:
    matchLabels:
      app: deploy-flask
  strategy: {}
  template:
    metadata:
      labels:
        app: deploy-flask
    spec:
      containers:
      - image: git-lab.mkb.uz:5050/u.salohiddinov/k8s:latest
        imagePullPolicy: Always
        name: docker
        ports:
        - containerPort: 5500
        resources: {}
      imagePullSecrets:
      - name: registry-secret
status: {}

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: deploy-flask
  name: deploy-flask
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 5500
  selector:
    app: deploy-flask
  type: ClusterIP
status:
  loadBalancer: {}

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  creationTimestamp: null
  name: ingress-flask
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: west.west.uz
    http:
      paths:
      - backend:
          service:
            name: deploy-flask
            port:
              number: 80
        path: /
        pathType: Prefix
status:
  loadBalancer: {}

